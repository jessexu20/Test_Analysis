{"name":"Test analysis","tagline":"Test and Analysis with JsHint","body":"# Test_Analysis\r\n##Author\r\nShiqian Xu,Feifei Wang\r\n## Test\r\n### Unit Test & Coverage Report\r\n\r\nWe are using the Homework 2(Test Generation) as our test sample, subject.js. Therefore we are using Istanbul as our tool to monitor the test coverage.\r\nWe saved it into a test.txt file for the script to check the coverage in Analysis Section.\r\n\r\n\tnode_modules/.bin/istanbul cover test.js\r\n\t\t\r\nThe following are the results of Istanbul. \r\n\r\n\t=============================== Coverage summary ===============================\r\n\tStatements   : 100% ( 14/14 )\r\n\tBranches     : 100% ( 4/4 )\r\n\tFunctions    : 100% ( 1/1 )\r\n\tLines        : 100% ( 13/13 )\r\n\t================================================================================\r\n\t\r\n### Improve testing coverage using constraint-based test generation\r\nWe have used the constraint-based test generation method to automatically generate the test cases. The automatically generated test cases are stored in test.js file.\r\nThe generated test cases will make the coverage to 100%. In order to automatically generate the test case. You can run the following command.\r\n\r\n\tnode main.js\r\nHowever, if we change the code in subject.js without running this command. We can get the newly edited code's coverage simply by running the following command to check whether the new code passed all the test cases.\r\n\r\n\tnode_modules/.bin/istanbul cover test.js\r\n\r\n## Analysis\r\n\r\n### Run the static analysis tool JsHint on the source code \r\nWe have used the static code analysis tool JsHint to run the analyse the subject.js. The info about JsHint can be found [here](http://jshint.com/docs/).\r\nYou can install it by the following command.\r\n\r\n\tnpm install jshint -g\r\nYou can running the JsHint by the following command.\r\n\r\n\tjshint subject.js\r\n\t\r\nThe following are the errors found by JsHint. We have saved the result into a analysis.txt for scripts using.\r\n\r\n\tsubject.js: line 3, col 9, Use '===' to compare with 'null'.\r\n\tsubject.js: line 3, col 21, Missing semicolon.\r\n\tsubject.js: line 6, col 14, Missing semicolon.\r\n\tsubject.js: line 8, col 18, Missing semicolon.\r\n\t4 errors\r\n\r\n#### Configure the options of JsHint\r\nWe can see that there are 4 erros which are found by JsHint. We can modify the [options](http://jshint.com/docs/options/) of the JsHint to omit certain errors found by JsHint.\r\nFor example, we want to omit the first error which is using '==' to compare with 'null'.\r\nWe can create a .jshintrc file and put the JsHint options into it. The list of the JsHint options can be found here. To omit the above the error,we can put the following into the file.\r\n\r\n\t{\r\n\t  \"eqnull\": true,\r\n\t}\r\nWhen we configured the JsHint, we rerun the JsHint, we can get the following the result, which is exactly what we want.\r\n\r\n\tsubject.js: line 3, col 21, Missing semicolon.\r\n\tsubject.js: line 6, col 14, Missing semicolon.\r\n\tsubject.js: line 8, col 18, Missing semicolon.\r\n\t3 errors\r\n### Reject a commit if it fails a minimum testing criteria\r\nWe need to configure the Github Hook to reject a commit. We can do it by editing the file in .git/hooks. In this directory, there is a pre-commit.sample file. What we need to do is to rename it into pre-commit and put our logic into it. We have made the pre-commit file to call our own script test.sh file to run when a commit is commited in this git repository. \r\nIn our case, we only put the following into the pre-commit, as we only need it to call test.sh.\r\n\t#!/bin/sh\r\n\t# Refuse to commit files with if failed coverage test by 50% or failed certain analysis rules#\r\n\techo \"call test.sh\"\r\n\tsh ./test.sh\r\n\r\n#### Less than 50% coverage of any kind in Coverage Report\r\nWe have used the Shell Script to get the result from test.txt, as mentioned in Test Section. If there is some coverage which is lower than 50%. We deny that commit and output the error infomation.\r\nThe following are the sample result:\r\n\r\n\tCheck Commit Script start now\r\n\t--------Running Istanbul\r\n\t=============================================================================\r\n\tWriting coverage object [/Users/jessexu/Documents/North Carolina State University/Courses/CSC591 DevOp/Test_Analysis/coverage/coverage.json]\r\n\tWriting coverage reports at [/Users/jessexu/Documents/North Carolina State University/Courses/CSC591 DevOp/Test_Analysis/coverage]\r\n\t=============================================================================\r\n\tIstanbul Finished\r\n\r\n\t--------Running Static Analysis tool Jshint!!\r\n\r\n\t--------Checking whether Analysis Result Satisfy Requirements~~~~~~\r\n\r\n\tPassed the Analysis Result Satisfy Requirements \r\n\t--------Checking whether coverage Satisfy Requirements~~~~~~\r\n\r\n\tStatements Coverage is higher than  50 %! Pass!\r\n\tBranches Coverage is less than  50 %.\r\n\t!!!Failed to commit!!! Please check the test.txt for references\r\n\r\n#### Failed the Analysis Criteria \r\nWe have used the Shell Script to get the result from analysis.txt, as mentioned in JsHint Section. If there is certain errors which are found by jshint, we will deny the commit and show the error infomation, in our case is the \"missing semicolon\". \r\nThe following are the sample result:\r\n\r\n\tCheck Commit Script start now\r\n\t--------Running Istanbul\r\n\t=============================================================================\r\n\tWriting coverage object [/Users/jessexu/Documents/North Carolina State University/Courses/CSC591 DevOp/Test_Analysis/coverage/coverage.json]\r\n\tWriting coverage reports at [/Users/jessexu/Documents/North Carolina State University/Courses/CSC591 DevOp/Test_Analysis/coverage]\r\n\t=============================================================================\r\n\tIstanbul Finished\r\n\r\n\t--------Running Static Analysis tool Jshint!!\r\n\tsubject.js: line 3, col 21, Missing semicolon.\r\n\tsubject.js: line 6, col 14, Missing semicolon.\r\n\tsubject.js: line 8, col 18, Missing semicolon.\r\n\r\n\t3 errors\r\n\r\n\t--------Checking whether Analysis Result Satisfy Requirements~~~~~~\r\n\r\n\t!!!Failed to commit!!! There is missing semicolon problems in your program\r\n##Result\r\nIf you passed all the criteria, you will be able to commit, as the following shows.\r\n\r\n\tJesses-MacBook-Air:Test_Analysis jessexu$ git add -A\r\n\tJesses-MacBook-Air:Test_Analysis jessexu$ git commit -m \"test2\"\r\n\tcall test.sh\r\n\tCheck Commit Script start now\r\n\t--------Running Istanbul\r\n\t=============================================================================\r\n\tWriting coverage object [/Users/jessexu/Documents/North Carolina State University/Courses/CSC591 DevOp/Test_Analysis/coverage/coverage.json]\r\n\tWriting coverage reports at [/Users/jessexu/Documents/North Carolina State University/Courses/CSC591 DevOp/Test_Analysis/coverage]\r\n\t=============================================================================\r\n\tIstanbul Finished\r\n\r\n\t--------Running Static Analysis tool Jshint!!\r\n\r\n\t--------Checking whether Analysis Result Satisfy Requirements~~~~~~\r\n\r\n\tPassed the Analysis Result Satisfy Requirements \r\n\t--------Checking whether coverage Satisfy Requirements~~~~~~\r\n\r\n\tStatements Coverage is higher than  50 %! Pass!\r\n\tBranches Coverage is higher than  50 %! Pass!\r\n\tFunctions Coverage is higher than  50 %! Pass!\r\n\tLines Coverage is higher than  50 %! Pass!\r\n\r\n\t[master 0aacf71] test2\r\n\t 8 files changed, 87 insertions(+), 40 deletions(-)\r\n\t rewrite README.md (63%)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}